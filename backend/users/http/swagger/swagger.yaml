basePath: /
definitions:
  errorx.ResponseError:
    properties:
      err:
        type: string
    type: object
  jwt.TokenPair:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  users.User:
    properties:
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  v1.AdminUserReq:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  v1.RefreshReq:
    properties:
      refreshToken:
        type: string
    type: object
  v1.SignInReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  v1.SignUpReq:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  v1.UpdateProfileReq:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
  title: Accounts MS
  version: "1.0"
paths:
  /api/accounts:
    get:
      consumes:
      - text/plain
      description: Получение списка пользователей
      operationId: getUsers
      parameters:
      - description: Размер выборки. По умолчанию 20
        in: query
        name: count
        type: integer
      - description: Начало выборки. По умолчанию 1
        in: query
        name: from
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение списка пользователей
      tags:
      - admin
    post:
      consumes:
      - text/plain
      description: Создание пользователя
      operationId: createUser
      parameters:
      - description: Запрос на создание пользователя
        in: body
        name: reqBody
        required: true
        schema:
          $ref: '#/definitions/v1.AdminUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание пользователя
      tags:
      - admin
  /api/accounts/{id}:
    delete:
      consumes:
      - text/plain
      description: Мягкое удаление пользователя из базы
      operationId: deleteUser
      parameters:
      - description: id пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Мягкое удаление пользователя из базы
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Обновление данных об аккаунте.
      operationId: updateUser
      parameters:
      - description: id пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Запрос на аккаунта пользователя
        in: body
        name: reqBody
        required: true
        schema:
          $ref: '#/definitions/v1.AdminUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление аккаунта пользователя.
      tags:
      - admin
  /api/accounts/me:
    get:
      consumes:
      - text/plain
      description: Получение профиля пользователя
      operationId: me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение профиля пользователя
      tags:
      - users
  /api/accounts/update:
    put:
      consumes:
      - application/json
      description: Обновление данных об аккаунте.
      operationId: profileUpdate
      parameters:
      - description: Запрос на обновление данных аккаунта
        in: body
        name: reqBody
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateProfileReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных об аккаунте.
      tags:
      - users
  /api/authentication/refresh:
    post:
      consumes:
      - application/json
      description: Получение новой токенов.
      operationId: refresh
      parameters:
      - description: Запрос на получение новой пары токенов
        in: body
        name: reqBody
        required: true
        schema:
          $ref: '#/definitions/v1.RefreshReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/jwt.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      summary: Получение новой пары токенов
      tags:
      - users
  /api/authentication/signin:
    post:
      consumes:
      - application/json
      description: Вход пользоватлея в аккаунт и получение новой пары jwt токенов.
      operationId: singIn
      parameters:
      - description: Запрос на авторизацию
        in: body
        name: reqBody
        required: true
        schema:
          $ref: '#/definitions/v1.SignInReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/jwt.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      summary: Вход пользователя в аккаунт
      tags:
      - users
  /api/authentication/signout:
    put:
      consumes:
      - text/plain
      description: |-
        Refresh token берется из куки refreshToken и удаляется из базы.
        Access token автоматически испортится через время указанное в конфиге.
      operationId: singOut
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Выход из аккаунта
      tags:
      - users
  /api/authentication/signup:
    post:
      consumes:
      - application/json
      description: |-
        Регистрация нового пользователя.
        Подразумевается, что username является уникальным
      operationId: singUp
      parameters:
      - description: Запрос на создание пользователя
        in: body
        name: reqBody
        required: true
        schema:
          $ref: '#/definitions/v1.SignUpReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      summary: Регистрация нового пользователя
      tags:
      - users
  /api/authentication/validate:
    get:
      consumes:
      - text/plain
      description: |-
        Регистрация нового пользователя.
        Подразумевается, что username является уникальным
      operationId: validate
      parameters:
      - description: AccessToken
        in: query
        name: accessToken
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      summary: Проверка токена на валидность
      tags:
      - users
  /api/doctors:
    get:
      consumes:
      - text/plain
      description: Получение списка докторов
      operationId: getDoctors
      parameters:
      - description: Размер выборки. По умолчанию 20
        in: query
        name: count
        type: integer
      - description: Начало выборки. По умолчанию 1
        in: query
        name: from
        type: integer
      - description: Фильтр по полному имени доктора
        in: query
        name: nameFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение списка докторов
      tags:
      - doctors
  /api/doctors/{id}:
    get:
      consumes:
      - text/plain
      description: Получение доктора по id
      operationId: getDoctor
      parameters:
      - description: id доктора
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorx.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorx.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение доктора по id
      tags:
      - doctors
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
